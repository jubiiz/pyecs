PYECS brainstorm

the internal representation : like building a graph, where you have 
    - nodes
        - serve as directional pinpoints
        - can serve as voltage setting for battery (if you traverse a battery, check the voltage diff at both ends according to polarity (polarity is fixed))
    - edges 
        -the edges can represent the components (wire can be one of them : basically a 0.5ohm resistance)
        - for representation purposes : a node can be inserted for "resistance edges" (as the circuit is compiled for representation)
        - each edge will acquire as info : type (resistance, battery, ), resistance, polarity for each Ix traversing it (so dict {+:A, -:B} meaning current flows from b to a (if I is positive))

in order to solve simple and complex circuits: 
    - use loop algorithm available on the teacher's slide
    - summary:
        - batteries are a special edge: (voltages are set per-node): as you traverse it applies the voltage change (it closes the circuit)


the edges can be given an initial arbitrary direction (the graph is directed)
**tho will that fkup the propreties? (like traverse...)

maybe : build undirected graph
    extract all loops as directed graphs
    for each loop, pass through each edge (they'll have an arbitrary direction of traversal: loop direction, and a Â±Ix for each I in that direction)
    substract all RIx from the row matrix corresponding to that loop
    add all voltage changes to the 1x1 constant matrix
    solve matrix [Ax|b] for all x


what I,ll need: 
nodes: voltage (none if it's not a battery)

edges: type (battery or resistance), 
    resistance, (0 for a battery, else has to be given)
    voltage, (None for both before calculated according to type)
    current (None before calculations)
    polarity : dictionary of {I_i: node_a, I_j : node_b} value being the first node of traversal



solving algoritm: 
    need list of n loops (lists of n intensities) where n = len(base_cycles)
    need the transpose of a list of a list of n voltages
    for loop in loops:
        for edge in loop:
            for I in polarity:
                if type is resistance:
                    if start_node == traversal_node: #(if you come from the same node as the I)
                        loops[loop][corresponding_I] += resistance
                    else: 
                        loops[loop][corresponding_I] -= resistance
                else:
                    if same polarity : 
                        voltages[corresponding_loop] += voltage
                    else:
                        voltages[corresponding_loop] -= voltage

    numpy solve: intensities = (loops, voltages)

    can then update current and voltage for every edge
    can then show an updated graph :))

    pyton tkinters for gui
        either a graphic in which I can click, or a grid where I can connect 2 "nodes"


